// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: imageconv.proto

package imageconvpb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 传入图片二进制（任意格式）以及期望的 quality（0-100，推荐 80）
type ImageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Quality       int32                  `protobuf:"varint,80,opt,name=quality,proto3" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageRequest) Reset() {
	*x = ImageRequest{}
	mi := &file_imageconv_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRequest) ProtoMessage() {}

func (x *ImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imageconv_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRequest.ProtoReflect.Descriptor instead.
func (*ImageRequest) Descriptor() ([]byte, []int) {
	return file_imageconv_proto_rawDescGZIP(), []int{0}
}

func (x *ImageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageRequest) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

// 返回 webp 二进制
type ImageReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageReply) Reset() {
	*x = ImageReply{}
	mi := &file_imageconv_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageReply) ProtoMessage() {}

func (x *ImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_imageconv_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageReply.ProtoReflect.Descriptor instead.
func (*ImageReply) Descriptor() ([]byte, []int) {
	return file_imageconv_proto_rawDescGZIP(), []int{1}
}

func (x *ImageReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_imageconv_proto protoreflect.FileDescriptor

const file_imageconv_proto_rawDesc = "" +
	"\n" +
	"\x0fimageconv.proto\x12\timageconv\"<\n" +
	"\fImageRequest\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x18\n" +
	"\aquality\x18P \x01(\x05R\aquality\" \n" +
	"\n" +
	"ImageReply\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data2N\n" +
	"\fImageService\x12>\n" +
	"\fConvertImage\x12\x17.imageconv.ImageRequest\x1a\x15.imageconv.ImageReplyB,Z*HYH-Blog-Gin/proto/imageconvpb;imageconvpbb\x06proto3"

var (
	file_imageconv_proto_rawDescOnce sync.Once
	file_imageconv_proto_rawDescData []byte
)

func file_imageconv_proto_rawDescGZIP() []byte {
	file_imageconv_proto_rawDescOnce.Do(func() {
		file_imageconv_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_imageconv_proto_rawDesc), len(file_imageconv_proto_rawDesc)))
	})
	return file_imageconv_proto_rawDescData
}

var file_imageconv_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_imageconv_proto_goTypes = []any{
	(*ImageRequest)(nil), // 0: imageconv.ImageRequest
	(*ImageReply)(nil),   // 1: imageconv.ImageReply
}
var file_imageconv_proto_depIdxs = []int32{
	0, // 0: imageconv.ImageService.ConvertImage:input_type -> imageconv.ImageRequest
	1, // 1: imageconv.ImageService.ConvertImage:output_type -> imageconv.ImageReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_imageconv_proto_init() }
func file_imageconv_proto_init() {
	if File_imageconv_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_imageconv_proto_rawDesc), len(file_imageconv_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imageconv_proto_goTypes,
		DependencyIndexes: file_imageconv_proto_depIdxs,
		MessageInfos:      file_imageconv_proto_msgTypes,
	}.Build()
	File_imageconv_proto = out.File
	file_imageconv_proto_goTypes = nil
	file_imageconv_proto_depIdxs = nil
}
